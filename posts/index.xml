<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 배하람 블로그</title>
    <link>https://baeharam.github.io/posts/</link>
    <description>Recent content in Posts on 배하람 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <managingEditor>gkfka6484@gmail.com (배하람)</managingEditor>
    <webMaster>gkfka6484@gmail.com (배하람)</webMaster>
    <lastBuildDate>Fri, 12 Jul 2019 17:14:19 +0900</lastBuildDate>
    
	<atom:link href="https://baeharam.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Javascript] 함수형 프로그래밍의 기본</title>
      <link>https://baeharam.github.io/posts/javascript/jsfunctional-programming/</link>
      <pubDate>Fri, 12 Jul 2019 17:14:19 +0900</pubDate>
      <author>gkfka6484@gmail.com (배하람)</author>
      <guid>https://baeharam.github.io/posts/javascript/jsfunctional-programming/</guid>
      <description>개념 함수형 프로그래밍이란 연산할 대상이 &amp;ldquo;함수&amp;rdquo;가 되는 프로그래밍 패러다임으로 내부의 데이터와 상태를 그대로 둔 채 여러가지의 함수를 조합하여 작업을 수행하는 방식이다. 선언형 프로그래밍(Declarative Programming)의 한 종류로 기존의 절차지향 프로그래밍, 객체지향 프로그래밍이 속하는 명령형 프로그래밍(Imperative Programming)과는 다른 부류이다. 기존에 나는 명령형 프로그래밍으로 공부해왔기 때문에 이 개념이 익숙치 않고 이를 위해서 계속 정리하고자 한다.
순수 함수(Pure Function) 순수함수는 말 그대로 순수한 함수, 즉 외부의 요인을 건드리지 않은채 매개변수를 받아 자신에게 정해진 로직만을 처리하는 함수를 말한다.</description>
    </item>
    
    <item>
      <title>[자료구조] 힙(Heap)</title>
      <link>https://baeharam.github.io/posts/data-structure/heap/</link>
      <pubDate>Fri, 12 Jul 2019 10:48:45 +0900</pubDate>
      <author>gkfka6484@gmail.com (배하람)</author>
      <guid>https://baeharam.github.io/posts/data-structure/heap/</guid>
      <description>힙의 정의 힙(Heap)이란 완전 이진 트리의 한 종류로 최댓값이나 최솟값을 빠르게 찾아내기 위해 고안된 자료구조이다. 힙의 각 노드는 키(Key)라는 값으로 구성되며 부모노드와 자식노드와의 관계는 다음이 성립한다.
 A가 부모노드, B가 자식노드일 경우 A의 키 값과 B의 키 값에는 대소관계가 주어진다.  힙은 자식 노드에 따라 여러가지 종류로 구분되지만 대부분 자식 노드 2개를 갖는 이진 힙(Binary Heap)을 사용하며 우선순위 큐(Priority Queue)의 구현체로 이용되거나 힙 정렬(Heap Sort)에 이용된다. 우선순위 큐가 사용되는 알고리즘으로는 최단경로를 찾는 다익스트라(Dijkstra) 알고리즘이 존재한다.</description>
    </item>
    
    <item>
      <title>[Javascript] 객체지향 프로그래밍의 기본</title>
      <link>https://baeharam.github.io/posts/javascript/js%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</link>
      <pubDate>Thu, 11 Jul 2019 17:44:55 +0900</pubDate>
      <author>gkfka6484@gmail.com (배하람)</author>
      <guid>https://baeharam.github.io/posts/javascript/js%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</guid>
      <description>캡슐화의 구현 기존의 객체지향 프로그래밍에서 캡슐화(Encapsulation)는 관련된 정보를 하나의 틀 안에 담는 개념, 즉 관련된 멤버 변수와 메소드를 클래스라는 틀 안에 담는 개념이다. 이때 중요한 것이 바로 해당 정보의 공개수준인데 정보은닉(Information Hiding)이라고 하며 보통 private, public 등으로 사용할 수 있다. 자바스크립트에선 캡슐화와 정보은닉을 클로저를 통해 구현할 수 있다.
var Person = function(arg) { var name = arg ? arg : &#39;haram&#39;; var F = function(){} F.prototype = { setName: function(arg2) { name = arg; }, getName: function() { return name; } }; return F; }();  IIFE를 통해서 클로저인 F 를 반환받고 F.</description>
    </item>
    
    <item>
      <title>[Javascript] Inheritance</title>
      <link>https://baeharam.github.io/posts/javascript/jsinheritance/</link>
      <pubDate>Wed, 10 Jul 2019 15:39:39 +0900</pubDate>
      <author>gkfka6484@gmail.com (배하람)</author>
      <guid>https://baeharam.github.io/posts/javascript/jsinheritance/</guid>
      <description>자바스크립트는 클래스 기반의 언어가 아닌 프로토타입 기반의 언어로 클래스 기반 언어에서의 상속을 구현하기 위해선 프로토타입의 특성을 활용해야 한다. 이를 사용해서 프로토타입 기반의 상속과 클래스 기반의 상속을 구현해낼 수 있다.
프로토타입 기반의 상속 공통 메소드 생성자 함수를 통해서 객체를 생성할 수 있는데, 이렇게 생성해낸 객체가 공통의 메소드를 가지게 하기 위해선 어떻게 해야할까? 직관적인 방법으로 생성자 함수 내에 메소드를 정의하면 그로 인해 생성되는 객체는 당연히 해당 메소드를 공통으로 가지게 된다. 하지만 이는 불필요하게 중복되는 영역을 메모리에 올려놓는 형태이므로 프로토타입을 사용해야 한다.</description>
    </item>
    
    <item>
      <title>[Javascript] Scope Chain</title>
      <link>https://baeharam.github.io/posts/javascript/jsscope-chain/</link>
      <pubDate>Wed, 10 Jul 2019 11:11:26 +0900</pubDate>
      <author>gkfka6484@gmail.com (배하람)</author>
      <guid>https://baeharam.github.io/posts/javascript/jsscope-chain/</guid>
      <description>Lexical Scoping 자바스크립트의 컴파일러는 토큰화(Tokenizing)와 렉싱(Lexing)을 처음에 하는데 이는 코드를 토큰 단위로 분리하여 의미를 매핑시키는 단계이다. Lex-time 이란 토큰에 의미를 부여하는 렉싱 과정을 말하며 이 때 자바스크립트의 스코핑 개념인 렉시컬 스코프가 형성된다.
Lexical scoping은 기존 함수 호출에 따른 dynamic scoping과는 반대되는 개념으로 함수를 선언할 때(Write time) 정의되는 스코핑 형태를 말한다. 말 그대로 함수가 어디에 적혀있는가에 따라서 스코프가 구성되는 방식이므로 lex-time과 연관이 되는 것이다. 따라서, 스코프 체인을 이해하기 위해선 lexical scoping에 대한 이해가 필수적이며 이 개념을 활용하여 구성되게 된다.</description>
    </item>
    
    <item>
      <title>[Javascript] Execution Context</title>
      <link>https://baeharam.github.io/posts/javascript/jsexecution-context/</link>
      <pubDate>Wed, 10 Jul 2019 09:27:48 +0900</pubDate>
      <author>gkfka6484@gmail.com (배하람)</author>
      <guid>https://baeharam.github.io/posts/javascript/jsexecution-context/</guid>
      <description>정의 ECMAScript 에서 정의하는 EC(Execution Context)는 다음과 같이 표현한다.
 Execution context (abbreviated form — EC) is the abstract concept used by ECMA-262 specification for typification and differentiation of an executable code.
실행 컨텍스트는 실행가능한 코드를 형상화하고 구분하는 추상적인 개념이다.
 즉, EC는 자바스크립트 엔진이 코드를 실행할 때 생성되는 하나의 환경(environment)이라고 할 수 있다.
종류  전역 실행 컨텍스트 (Global Execution Context, GEC)  GEC는 브라우저에서 자바스크립트를 처음 로드할 때 생성되는 EC로 어떠한 함수나 객체에도 속하지 않고 전역공간에 놓인 모든 코드들이 속하는 EC이다.</description>
    </item>
    
    <item>
      <title>[알고리즘] Lazy Propagation</title>
      <link>https://baeharam.github.io/posts/algorithm/lazy-propagation/</link>
      <pubDate>Tue, 09 Jul 2019 12:10:49 +0900</pubDate>
      <author>gkfka6484@gmail.com (배하람)</author>
      <guid>https://baeharam.github.io/posts/algorithm/lazy-propagation/</guid>
      <description>개념 기존 세그먼트 트리에서 하나의 리프노드를 업데이트 할 때 $O(lgN)$ 이 걸리기 때문에 구간 업데이트에 관련된 문제가 나올 경우 최대 $O(NlgN)$ 이 걸려서 시간초과를 받게 된다. 따라서 이를 위해 다른 알고리즘이 필요한데 바로 이러한 구간 업데이트를 단 $O(lgN)$ 만에 수행할 수 있는 테크닉이 lazy propagation이다. 이름의 뜻 그대로 게으르게(lazy) 전파(propagation) 한다는 것으로 특정 업데이트 구간에 포함되는 노드들에게 나중에 전파시킬 값을 저장해 둠으로써 다음 업데이트나 쿼리를 할 때 마다 자식노드들 한테만 전파해주면 되게 된다.</description>
    </item>
    
    <item>
      <title>[알고리즘] KMP 알고리즘</title>
      <link>https://baeharam.github.io/posts/algorithm/kmp/</link>
      <pubDate>Mon, 08 Jul 2019 17:38:54 +0900</pubDate>
      <author>gkfka6484@gmail.com (배하람)</author>
      <guid>https://baeharam.github.io/posts/algorithm/kmp/</guid>
      <description>다른 분야도 약하긴 하지만, 문자열이 상당히 약하기 때문에 전에 대충 공부했던 KMP를 다시 꺼내들어서 공부했다. 상당히 어려운 알고리즘이었고 이해하는데 꽤 오랜 시간이 걸렸다. 까먹으면 안되겠지만 혹시 몰라서 까먹을 나중을 위해서 공들여 정리하고자 한다.
개요 KMP 알고리즘은 어떤 문자열 $H$와 $S$가 주어졌고 $H$가 $S$보다 긴 경우에, $H$ 안에 $S$가 포함되어 있는지를 탐색하는 알고리즘이다. 자, 생각을 해보자. 예를 들어 단순 브루트 포스로 $S$를 탐색한다면 상당히 오랜 시간이 걸릴 수밖에 없다.
예를 들어, ABAABAA라는 문자열 $H$에서 부분문자열 ABAC를 찾기 위해선 아래와 같이 찾아야 한다.</description>
    </item>
    
    <item>
      <title>[알고리즘] 확장 유클리드 알고리즘</title>
      <link>https://baeharam.github.io/posts/algorithm/extended-euclidean/</link>
      <pubDate>Mon, 08 Jul 2019 17:35:22 +0900</pubDate>
      <author>gkfka6484@gmail.com (배하람)</author>
      <guid>https://baeharam.github.io/posts/algorithm/extended-euclidean/</guid>
      <description>유클리드 호제법(Euclidean algorithm) 정의 유클리드 호제법(= 유클리드 알고리즘)은 두 정수 사이의 최대공약수를 보다 효과적으로 구하는 방법으로 두 정수 $a,b$ 가 존재할 때 다음 식을 만족하는 방법론을 일컫는 말이다. $$ GCD(A,B) = GCD(B,r) $$ 이 때 $A\gt B$ 가 성립하며 $A\equiv r\ (mod\ B)$ 를 조건으로 한다.
증명 두 정수 $A,B(A \gt B)$ 의 최대공약수(GCD)를 $G$ 라고 하자. $G$ 는 공약수이므로 두 서로소 $a,b$ 에 대해 다음 식이 성립한다. $$ A=aG, B=bG $$ $A$ 를 $B$ 로 나눈 나머지를 $r$ , 몫을 $q$ 라고 하면 $A=qB+r\ (0\le r \lt \lvert B \rvert)$ 를 만족한다.</description>
    </item>
    
  </channel>
</rss>